NAME		= so_long
FLAGS		= -Wall -Wextra -Werror
RM			= rm -rf

LIBFILES	= gnl/get_next_line_utils gnl/get_next_line \
			  ft_printf/ft_printf ft_printf/ft_putchar ft_printf/ft_putaddr ft_printf/ft_putnbr_hex \
			  ft_printf/ft_putnbr_u ft_printf/ft_putnbr ft_printf/ft_putstr

FILES		= components errors get_map hooks ft_itoa mlx_render move window
MAIN		= so_long
B_MAIN		= bonus/so_long_bonus

#PATH suffix/prefix
PATH		= $(addprefix srcs/, $(FILES))
BX_PATH		= $(addprefix ./bonus/srcs/, $(FILES))
B_PATH		= $(addsuffix _bonus, $(BX_PATH))
LIB_PATH	= $(addprefix srcs/, $(LIBFILES))

#lib_extention
LIB_SRC			= $(LIB_PATH:=.c)
LIB_OBJ			= $(LIB_PATH:=.o)

#main_source/objects
SRC			= $(PATH:=.c)
OBJ			= $(PATH:=.o)
MAIN_OBJ	= $(MAIN:=.o)

#bonus_source/objects
B_SRC		= $(B_PATH:=.c)
B_OBJ		= $(B_PATH:=.o)
B_MAIN_OBJ	= $(B_MAIN:=.o)


#includes
HEADER		= so_long.h
B_HEADER	= ./bonus/so_long_bonus.h
MLX_F	= -lmlx -framework OpenGL -framework AppKit

#all
all: $(NAME)

#archives
archive:
	@ar rc so_long.a $(OBJ) $(LIB_OBJ) $(MAIN_OBJ)
b_archive:
	@ar rc so_long.a $(B_OBJ) $(LIB_OBJ) $(B_MAIN_OBJ)

$(NAME): $(OBJ) $(LIB_OBJ) $(MAIN_OBJ) $(HEADER) archive
	@printf "Compiling $(NAME)...\n"
	@$(CC) $(FLAGS) $(MAIN_OBJ) $(OBJ) $(LIB_OBJ) $(MLX_F) -o $(NAME)
	@printf "Executable ready.\n"

bonus: $(B_OBJ) $(LIB_OBJ) $(B_MAIN_OBJ) $(B_HEADER) b_archive
	@printf "Compiling $(NAME)...\n"
	@$(CC) $(FLAGS) $(B_MAIN_OBJ) $(B_OBJ) $(LIB_OBJ) $(MLX_F) -o $(NAME)
	@printf "Executable ready.\n"
%.o: %.c
	$(CC) $(FLAGS) -c $< -o $@

norm:
	@norminette

clean:
	@printf "\nRemoving object files ... \n"
	@$(RM) $(OBJ) $(B_OBJ) $(LIB_OBJ) $(MAIN_OBJ) $(B_MAIN_OBJ) so_long.a
	@printf "Object files removed.\n"

fclean: clean
	@printf "\nRemoving $(NAME)... \n"
	@$(RM) $(NAME)
	@printf "Executable removed.\n\n"

re: fclean $(NAME)

re_bonus: fclean bonus
